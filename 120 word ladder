#######################################
Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary

Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

##############################################



class Solution:
    """
    @param: start: a string
    @param: end: a string
    @param: dict: a set of string
    @return: An integer
    """
    def ladderLength(self, start, end, dict):
        # write your code here
        dict.add(end)
        queue=collections.deque([start])
        visited=set([start])
        
        distance=0
        while queue:
            distance+=1
            for i in range(len(queue)):
                word=queue.popleft()
                if word==end:
                    return distance
                    
                for next_word in self.get_next_words(word):
                    if next_word not in dict or next_word in visited:
                        continue
                    queue.append(next_word)
                    visited.add(next_word)
                    
        
    def get_next_words(self,word):
        next_words=set()
        for i in range(len(word)):
            left,right=word[:i],word[i+1:]
            
            for char in "abcdefghijklmnopqrstuvwxyz":
                if word[i]==char:
                    continue
                new_word=left+char+right
                next_words.add(new_word)
        return next_words
