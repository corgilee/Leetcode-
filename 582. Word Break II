#############################
Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

Example
Gieve s = lintcode,
dict = ["de", "ding", "co", "code", "lint"].

A solution is ["lint code", "lint co de"].

################################


class Solution:
    """
    @param: s: A string
    @param: wordDict: A set of words.
    @return: All possible sentences.
    """
    def wordBreak(self, s, wordDict):
        # write your code here
        memo={}
        return self.dfs(s, wordDict ,memo)
        
    def dfs(self, s, wordDict, memo):
        if s in memo:
            return memo[s]
            
        if len(s)==0:
            return []
            
        #create a list called "partitions", make the "partitions" as []
        partitions=[]
        
        #case 1, if the whole s is in the wordDict
        if s in wordDict:
            partitions.append(s)
            
        for i in range(1,len(s)):
            word=s[:i]
            if word not in wordDict:
                continue
            subpartitions=self.dfs(s[i:],wordDict,memo)
            
            for subpartition in subpartitions:
                partitions.append(word+" "+subpartition)
                
        memo[s]=partitions
        
        return partitions
