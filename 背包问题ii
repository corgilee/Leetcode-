########### Q2 #####################################

给出n个物品的体积A[i]和其价值V[i]，将他们装入一个大小为m的背包，最多能装入的总价值有多大？
** 注意事项 **
A[i], V[i], n, m均为整数。你不能将物品进行切分。你所挑选的物品总体积需要小于等于给定的m。
** 样例 **
对于物品体积[2, 3, 5, 7]和对应的价值[1, 5, 2, 4], 假设背包大小为10的话，最大能够装入的价值为9

############################################################

跟第一题很相似，可以先回去看第一题

################################################################
    
class Solution:

    def backPack(self, m, A):
        # write your code here
        
        n=len(A)
        
        dp=[[]*(m+1) for _ in range(n+1)]
        
        #initialize 
        # fill the first col and rol
        for i in range(n+1):
            dp[i][0]=0
        
        for j in range(m+1):
            dp[0][j]=0
 
 
        for i in range(1,n+1):
            for j in range(1, m+1):
                if A[i-1]<=j:
                    dp[i][j]= max(dp[i-1][j] or dp[i-1][j-A[i-1]]+V[i-1])
                else:
                    dp[i][j]=dp[i-1][j]
         
         return dp[n][m]
                    
                    
