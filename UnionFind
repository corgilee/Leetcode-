https://www.jiuzhang.com/solution/graph-valid-tree/#tag-highlight-lang-python


并查集的精髓即三个操作：
1. 初始化
初始化后每一个元素的父亲节点是它本身，即自己是自己的大哥（也可以根据情况而变）

2. 查找
查找一个元素所在的集合，其精髓是找到这个元素的大哥！这个才是并查集判断和合并的最终依据。
判断两个元素是否属于同一集合，只要看他们是不是最终都归一个大哥管

3. 合并
合并两个不相交集合就是让一伙的老大哥拜另一伙儿的老大哥为大哥


class Solution:
    """
    @param n: An integer
    @param edges: a list of undirected edges
    @return: true if it's a valid tree, or false
    """
    def validTree(self, n, edges):
        if n - 1 != len(edges):
            return False
        
        self.father = {i: i for i in range(n)} #在初始状态下，每个node的father node 就是自己
        self.size = n
        
        for a, b in edges:
            self.union(a, b)
            
        return self.size == 1
        
    def union(self, a, b):
        root_a = self.find(a)
        root_b = self.find(b)
        if root_a != root_b:
            self.size -= 1
            self.father[root_a] = root_b
        
    def find(self, node):
        path = []
        while node != self.father[node]:
            path.append(node)
            node = self.father[node]
            
        for n in path:
            self.father[n] = node
            
        return node
