########################################################
Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Example
Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.


########################################################
可以使用单调栈。
从高位向低位依次入栈，若当前数字小于栈顶元素且k不为0，则删除栈顶元素。
最后将栈内的元素变为数字即可。


第一步:
for i in range(len(num)):
curr=num[i]
while 比当前stack[-1] 小，k>0:
	stack.pop()
append(curr)

第二步:
如果k还是>0, 说明就是从最后开始删，一直pop， 直到k==0 为止

第三步：
最后把stack 里面的合并成一个string 返回
result_list=['1', '2', '3']
''.join(result_list)

########################################################




class Solution:
    """
    @param num: a string
    @param k: an integer
    @return: return a string
    """
    def removeKdigits(self, num, k):
        # write your code here
        
        if k==0:
            return num
        
        if k>len(num):
            return "0"
            
        
        stack=[]
        for i in range(len(num)):
            curr=num[i]
            while k>0 and len(stack)>0 and stack[-1]>curr:
                stack.pop()
                k-=1
            
            if curr!='0' or len(stack)>0:
                stack.append(curr)
        
        while k>0 and len(stack)>0:
            stack.pop()
            k-=1
        
        
        if len(stack)==0:
            return "0"
            
        return "".join(stack)
